<<<<<<< HEAD
import React, { forwardRef, useState } from 'react';
import { motion } from 'framer-motion';
import ReactMarkdown from 'react-markdown';
import { CodeBlock } from './CodeBlock';
import { ImageAnalysis } from './ImageAnalysis';
import { SearchResults } from './SearchResults';
import { Brain, Clock, Lightbulb, User, Bot, Search, Sparkles, Link, Tag, Edit2, Check, Copy, X } from 'lucide-react';
=======
import React, { forwardRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import ReactMarkdown from 'react-markdown';
import { CodeBlock } from './CodeBlock';
import { ImageAnalysis } from './ImageAnalysis';
import { Brain, Clock, Lightbulb } from 'lucide-react';
>>>>>>> befea909b854328a5a5196711a23e9cc38d9d475
import type { Message } from '../types';

interface ChatMessageProps {
  message: Message;
<<<<<<< HEAD
  onEditMessage?: (messageId: string, newContent: string) => void;
}

export const ChatMessage = forwardRef<HTMLDivElement, ChatMessageProps>(({ message, onEditMessage }, ref) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editedContent, setEditedContent] = useState(message.content);
  const [copied, setCopied] = useState(false);

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const handleSaveEdit = () => {
    if (onEditMessage && editedContent !== message.content) {
      onEditMessage(message.id, editedContent);
    }
    setIsEditing(false);
  };

  const handleCancelEdit = () => {
    setEditedContent(message.content);
    setIsEditing(false);
=======
}

export const ChatMessage = forwardRef<HTMLDivElement, ChatMessageProps>(({ message }, ref) => {
  const getMessageEmoji = () => {
    if (message.type === 'thinking') return 'ðŸ¤”';
    if (message.type === 'memory') return 'ðŸ’­';
    return message.role === 'assistant' 
      ? ['ðŸ¤–', 'ðŸŽ¯', 'ðŸ’¡', 'âœ¨', 'ðŸš€', 'ðŸŽ¨', 'ðŸ”®', 'ðŸŽ­'][Math.floor(Math.random() * 8)]
      : 'ðŸ‘¤';
>>>>>>> befea909b854328a5a5196711a23e9cc38d9d475
  };

  const renderMemoryContext = () => {
    if (!message.memoryContext) return null;
    return (
<<<<<<< HEAD
      <div className="flex items-center gap-2 text-purple-400/80 text-sm mb-3 p-2 rounded-lg bg-purple-400/10">
        <Brain className="w-4 h-4" />
        <span className="font-medium">Related context:</span>
        <span className="text-purple-300/90">{message.memoryContext}</span>
      </div>
    );
  };

  const renderKeywords = () => {
    if (!message.keywords?.length) return null;
    return (
      <div className="flex flex-wrap gap-2 mt-3">
        {message.keywords.map((keyword, index) => (
          <span 
            key={index}
            className="inline-flex items-center gap-1 px-2 py-1 rounded-full bg-gray-700/50 text-gray-300 text-sm"
          >
            <Tag className="w-3 h-3" />
            {keyword}
          </span>
        ))}
      </div>
    );
  };

  const renderSourceIndicator = () => {
    if (!message.source) return null;
    return (
      <div className="flex items-center gap-2 text-xs text-gray-400 mt-3 pt-3 border-t border-gray-700/50">
        <Sparkles className="w-4 h-4" />
        <span>Generated by {message.source === 'gemini' ? 'Gemini AI' : 'Web Search'}</span>
        {message.source === 'serpapi' && (
          <Link className="w-4 h-4 text-blue-400" />
        )}
      </div>
    );
  };

  const renderSearchResults = () => {
    if (!message.searchResults) return null;
    return (
      <div className="mt-4 space-y-3">
        <div className="flex items-center gap-2 text-blue-400 mb-3">
          <Search className="w-5 h-5" />
          <span className="font-medium">Search Results</span>
        </div>
        <SearchResults results={message.searchResults} />
      </div>
=======
      <motion.div
        initial={{ opacity: 0, y: -10 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex items-center gap-2 text-purple-400 text-sm mb-2"
      >
        <Brain className="w-4 h-4" />
        <span>Recalling previous conversation...</span>
        <Clock className="w-4 h-4" />
      </motion.div>
>>>>>>> befea909b854328a5a5196711a23e9cc38d9d475
    );
  };
  
  const renderContent = () => {
<<<<<<< HEAD
    if (isEditing && message.role === 'user') {
      return (
        <div className="w-full">
          <textarea
            value={editedContent}
            onChange={(e) => setEditedContent(e.target.value)}
            className="w-full p-3 bg-gray-800 border border-gray-700 rounded-lg text-gray-200 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 resize-none"
            rows={3}
            autoFocus
          />
          <div className="flex justify-end gap-2 mt-2">
            <button
              onClick={handleCancelEdit}
              className="px-3 py-1 rounded-lg bg-gray-700 hover:bg-gray-600 text-gray-300 flex items-center gap-1"
            >
              <X className="w-4 h-4" />
              Cancel
            </button>
            <button
              onClick={handleSaveEdit}
              className="px-3 py-1 rounded-lg bg-purple-600 hover:bg-purple-700 text-white flex items-center gap-1"
            >
              <Check className="w-4 h-4" />
              Save
            </button>
          </div>
        </div>
      );
    }

    switch (message.type) {
      case 'thinking':
        return (
          <div className="flex items-center gap-3">
            <div className="text-purple-400">
              <Lightbulb className="w-5 h-5" />
            </div>
            <span className="text-gray-300">Thinking...</span>
=======
    switch (message.type) {
      case 'thinking':
        return (
          <div className="flex items-center gap-2 text-gray-400">
            <motion.div
              animate={{ scale: [1, 1.2, 1] }}
              transition={{ duration: 1, repeat: Infinity }}
            >
              <Lightbulb className="w-5 h-5" />
            </motion.div>
            <span>Thinking...</span>
>>>>>>> befea909b854328a5a5196711a23e9cc38d9d475
          </div>
        );
      case 'code':
        return (
          <CodeBlock
            code={message.content}
            language={message.language || 'javascript'}
          />
        );
      case 'image':
        return message.imageUrl && message.imageAnalysis ? (
          <ImageAnalysis
            imageUrl={message.imageUrl}
            analysis={message.imageAnalysis}
          />
        ) : null;
<<<<<<< HEAD
      case 'search':
        return (
          <div className="space-y-4">
            <div className="flex items-center gap-2 text-blue-400">
              <Search className="w-5 h-5" />
              <span className="font-medium">Search Results</span>
            </div>
            <div className="prose prose-invert max-w-none">
              <ReactMarkdown>{message.content}</ReactMarkdown>
            </div>
            {renderSearchResults()}
          </div>
        );
      default:
        return (
          <div className="prose prose-invert max-w-3xl break-words message-text group">
            {message.memoryContext && renderMemoryContext()}
            <div className="relative">
              {message.role === 'assistant' && (
                <button
                  onClick={() => handleCopy(message.content)}
                  className="absolute right-0 top-0 p-2 opacity-0 group-hover:opacity-100 bg-gray-800 rounded-lg hover:bg-gray-700"
                  title={copied ? 'Copied!' : 'Copy message'}
                >
                  {copied ? (
                    <Check className="w-4 h-4 text-green-400" />
                  ) : (
                    <Copy className="w-4 h-4 text-gray-400" />
                  )}
                </button>
              )}
              <ReactMarkdown
                components={{
                  h1: ({node, ...props}) => (
                    <h1 className="text-2xl font-bold mb-4 text-white bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent" {...props} />
                  ),
                  h2: ({node, ...props}) => (
                    <h2 className="text-xl font-bold mb-3 text-gray-100" {...props} />
                  ),
                  h3: ({node, ...props}) => (
                    <h3 className="text-lg font-bold mb-2 text-gray-200" {...props} />
                  ),
                  p: ({node, children, ...props}) => (
                    <p className="mb-4 leading-relaxed text-gray-200" {...props}>
                      {children}
                    </p>
                  ),
                  ul: ({node, ...props}) => (
                    <ul className="list-disc pl-6 mb-4 space-y-2 text-gray-200" {...props} />
                  ),
                  ol: ({node, ...props}) => (
                    <ol className="list-decimal pl-6 mb-4 space-y-2 text-gray-200" {...props} />
                  ),
                  li: ({node, ...props}) => (
                    <li className="mb-2" {...props} />
                  ),
                  code: ({node, inline, className, children, ...props}) => {
                    const match = /language-(\w+)/.exec(className || '');
                    return !inline && match ? (
                      <div className="not-prose my-4">
                        <CodeBlock code={String(children).replace(/\n$/, '')} language={match[1]} />
                      </div>
                    ) : (
                      <code className="bg-gray-700/50 px-1.5 py-0.5 rounded text-blue-300 font-medium" {...props}>
                        {children}
                      </code>
                    );
                  },
                  blockquote: ({node, ...props}) => (
                    <blockquote className="border-l-4 border-purple-400/50 pl-4 italic text-gray-300 my-4" {...props} />
                  ),
                }}
              >
                {message.content}
              </ReactMarkdown>
            </div>
            {renderKeywords()}
            {message.searchResults && renderSearchResults()}
            {renderSourceIndicator()}
=======
      default:
        return (
          <div className="prose prose-invert max-w-none break-words">
            {message.memoryContext && renderMemoryContext()}
            <ReactMarkdown
              components={{
                h1: ({node, ...props}) => <h1 className="text-2xl font-bold mb-4" {...props} />,
                h2: ({node, ...props}) => <h2 className="text-xl font-bold mb-3" {...props} />,
                h3: ({node, ...props}) => <h3 className="text-lg font-bold mb-2" {...props} />,
                p: ({node, children, ...props}) => (
                  <motion.p
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="mb-4 leading-relaxed break-words"
                    {...props}
                  >
                    {children}
                  </motion.p>
                ),
                ul: ({node, ...props}) => <ul className="list-disc pl-6 mb-4" {...props} />,
                ol: ({node, ...props}) => <ol className="list-decimal pl-6 mb-4" {...props} />,
                li: ({node, ...props}) => <li className="mb-2" {...props} />,
                code: ({node, inline, className, children, ...props}) => {
                  const match = /language-(\w+)/.exec(className || '');
                  return !inline && match ? (
                    <div className="not-prose">
                      <CodeBlock code={String(children).replace(/\n$/, '')} language={match[1]} />
                    </div>
                  ) : (
                    <code className="bg-gray-700 px-1 rounded" {...props}>
                      {children}
                    </code>
                  );
                },
              }}
            >
              {message.content}
            </ReactMarkdown>
>>>>>>> befea909b854328a5a5196711a23e9cc38d9d475
          </div>
        );
    }
  };

  return (
<<<<<<< HEAD
    <div
      ref={ref}
      className="flex gap-1.5 sm:gap-2 md:gap-4 p-2 sm:p-3 md:p-6 border-b border-gray-800/50 group"
    >
      <div className={`w-7 h-7 sm:w-8 sm:h-8 md:w-10 md:h-10 rounded-lg flex items-center justify-center flex-shrink-0 ${
        message.role === 'assistant' 
          ? 'bg-gradient-to-br from-purple-500 to-blue-500 shadow-lg shadow-purple-500/20'
          : 'bg-gray-800/50'
      }`}>
        {message.role === 'assistant' ? (
          <Bot className="w-4 h-4 sm:w-5 sm:h-5 md:w-6 md:h-6 text-white" />
        ) : (
          <User className="w-4 h-4 sm:w-5 sm:h-5 md:w-6 md:h-6 text-gray-300" />
        )}
      </div>
      <div className="flex-1 min-w-0 max-w-full md:max-w-4xl relative text-xs sm:text-sm md:text-base">
        {message.role === 'user' && !isEditing && (
          <button
            onClick={() => setIsEditing(true)}
            className="absolute right-0 top-0 p-1.5 md:p-2 opacity-0 group-hover:opacity-100 bg-gray-800 rounded-lg hover:bg-gray-700"
            title="Edit message"
          >
            <Edit2 className="w-3.5 h-3.5 md:w-4 md:h-4 text-gray-400" />
          </button>
        )}
        {renderContent()}
      </div>
    </div>
=======
    <motion.div
      ref={ref}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className={`flex gap-4 p-6 ${
        message.role === 'assistant' ? 'bg-gray-800/50' : 'bg-gray-900'
      }`}
    >
      <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
        message.role === 'assistant' 
          ? 'bg-gradient-to-r from-purple-600 to-blue-600'
          : 'bg-gray-700'
      }`}>
        <span className="text-white text-sm">{getMessageEmoji()}</span>
      </div>
      <div className="flex-1 min-w-0 overflow-hidden">
        {renderContent()}
      </div>
    </motion.div>
>>>>>>> befea909b854328a5a5196711a23e9cc38d9d475
  );
});

ChatMessage.displayName = 'ChatMessage';